{"version":3,"sources":["Component/Recipe.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","toFixed","src","alt","map","ingredient","key","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","get","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yLAGe,SAASA,EAAT,GAA0D,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACvD,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,SAASJ,GACvB,2CAAiBC,EAASI,QAAQ,IAElC,yBAAKC,IAAKJ,EAAOK,IAAKP,IAEtB,4BACE,4CACCG,EAAYK,KAAI,SAACC,GAAD,OACf,wBAAIC,IAAKD,EAAWE,MAAOF,EAAWE,WCqDjCC,MA/Df,WACE,IADa,EAIiBC,mBAAS,IAJ1B,mBAINC,EAJM,KAIGC,EAJH,OAKeF,mBAAS,IALxB,mBAKNG,EALM,KAKEC,EALF,OAMaJ,mBAAS,IANtB,mBAMNK,EANM,KAMCC,EAND,KA6Bb,OArBAC,qBAAU,YACC,uCAAG,8BAAAC,EAAA,sEACaC,MAAM,mCAAD,OACSJ,EADT,mBATjB,WASiB,oBARhB,qCAOF,cACJK,EADI,gBAISA,EAASC,OAJlB,OAIJC,EAJI,OAKVV,EAAWU,EAAKC,MALN,2CAAH,qDAOTC,KACC,CAACT,IAaF,yBAAKd,UAAU,aACb,yBAAKA,UAAU,UACf,0BAAMwB,SATQ,SAACC,GACjBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,MAON,oFADF,IAC4C,6BAC1C,yBAAKb,UAAU,UACb,2BAEE2B,KAAK,OACLC,MAAOhB,EACPiB,SApBW,SAACJ,GACpBZ,EAAUY,EAAEK,OAAOF,UAqBb,4BAAQ5B,UAAU,QAAQ2B,KAAK,UAA/B,aAOJ,yBAAK3B,UAAU,UACdU,EAAQN,KAAI,SAAC2B,GAAD,OACX,kBAACpC,EAAD,CACEW,IAAKyB,EAAOA,OAAOC,MACnBpC,MAAOmC,EAAOA,OAAOC,MACrBnC,SAAUkC,EAAOA,OAAOlC,SACxBC,MAAOiC,EAAOA,OAAOjC,MACrBC,YAAagC,EAAOA,OAAOhC,oBC/CjBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d399b1ed.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport default function Recipe({ title, calories, image, ingredients }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      <span>Calories: {calories.toFixed(2)}</span>\r\n\r\n      <img src={image} alt={title} />\r\n\r\n      <ul>\r\n        <h3>Ingredients:</h3>\r\n        {ingredients.map((ingredient) => (\r\n          <li key={ingredient.text}>{ingredient.text}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Component/Recipe\";\nimport \"./App.css\";\n\nfunction App() {\n  const APP_ID = \"c736daf0\";\n  const APP_KEY = \"23a9431aee92da88a15ae8fc69f66cf3\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    const get = async () => {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n    };\n    get();\n  }, [query]);\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"campos\">\n      <form onSubmit={getSearch}>\n        <h2>ü•ôWhat would you like to eat ?üç≤</h2> <br></br>\n        <div className=\"inputs\">\n          <input\n            \n            type=\"text\"\n            value={search}\n            onChange={updateSearch}\n          />\n          <button className=\"botao\" type=\"submit\">\n            Search\n          </button>\n          </div>\n        \n      </form>\n      </div>\n      <div className=\"recipe\">\n      {recipes.map((recipe) => (\n        <Recipe\n          key={recipe.recipe.label}\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// curl \"https://api.edamam.com/search?q=chicken&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}&from=0&to=3&calories=591-722&health=alcohol-free\"\n// className=\"recipe\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}